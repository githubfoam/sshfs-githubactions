name: "sshfs CI workflow"


on:
  push:
    branches: [ main ]
  schedule:
      - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month 


jobs:

  alpine-latest-sshfs-job:
    name: "sshfs alpine docker  ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "alpine" #https://hub.docker.com/_/alpine
      version: "latest"
      name: "alpine/sshfs"
      dockerfiledir: "dockerfiles"      
      dockerfilename: "Dockerfile.alpine.sshfs"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch    
    - name: "docker build sshfs alpine base"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        # docker image ls
        # docker image history ${name}:${version}
        # docker system df -v               
        # docker image inspect ${name}:${version}
        # find ENTRYPOINT & CMD on an image
        docker inspect -f '{{.Config.Entrypoint}}' ${name}:${version}
        docker run ${name}:${version} -V      
 
  ubuntu-latest-sshfs-job:
    name: "sshfs  docker  ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "alpine" #https://hub.docker.com/_/alpine
      version: "latest"
      name: "ubuntu/sshfs"
      dockerfiledir: "dockerfiles"      
      dockerfilename: "Dockerfile.ubuntu.sshfs"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch    
    - name: "docker build sshfs"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        # docker image ls
        # docker image history ${name}:${version}
        # docker system df -v               
        # docker image inspect ${name}:${version}
        # find ENTRYPOINT & CMD on an image
        docker inspect -f '{{.Config.Entrypoint}}' ${name}:${version}
        # docker run ${name}:${version} -V      
        docker run ${name}:${version} sshfs -V 
 
        